<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.dy.dao.DyTestDao">
    <sql id="userField">
        user_id,user_realname,user_phone
    </sql>
    <resultMap id="userMap" type="com.dy.model.DyUser">
        <id property="id" column="user_id"/>
        <result column="user_realname" property="realname"/>
        <result column="user_phone" property="phone"/>
    </resultMap>
    <!--动态SQL,通过动态sql查询,下面这几种方式都可以-->


    <!--使用if查询-->
    <!--语句解释就是,如果realname为真,那么就在SQL语句上加上user_realname = #{realname}
    否则就不加,进入下一个语句-->
    <!--<select id="findByNameAndPassword" parameterType="string" resultMap="userMap">
        select
        <include refid="userField"/>
        from dy_user
        where 1=1
        <if test="realname != null and realname !=  ''">
            and user_realname = #{realname}
        </if>
        <if test="password != null and password != ''">
            and user_password = #{password}
        </if>
    </select>-->

    <!--使用choose,when和otherwise查询-->
    <!--语句解释就是,如果realname为真,那么就在SQL语句上加上user_realname = #{realname}
    否则就不加,进入下一个语句,这个和if相比多了一个otherwise默认语句,相当于else,但是otherwise是非必写的-->
<!--    <select id="findByNameAndPassword" parameterType="string" resultMap="userMap">
        select
        <include refid="userField"/>
        from dy_user
        where 1 = 1
        <choose>
            <when test="realname != null and realname != ''">
                and user_realname = #{realname}
            </when>
            <when test="password != null and password != ''">
                and user_password = #{password}
            </when>
            <otherwise>
                ORDER BY id DESC
            </otherwise>
        </choose>
    </select>-->

    <!--trim-->
<!--    <select id="findByNameAndPassword"  parameterType="string" resultMap="userMap">-->
<!--        select-->
<!--        <include refid="userField"/>-->
<!--        from dy_user-->
<!--        <trim prefix="where" prefixOverrides="and">-->
<!--            <if test="realname != null and realname != ''">-->
<!--                and user_realname = #{realname}-->
<!--            </if>-->
<!--            <if test="password != null and password != ''">-->
<!--                and user_password = #{password}-->
<!--            </if>-->
<!--        </trim>-->
<!--    </select>-->

    <!--<where></where>只有当条件至少有一个的时候才会加入where否则就只是select * from dy_user
    而且他可以自动忽略第一个条件的前面的and-->
    <select id="findByNameAndPassword" resultMap="userMap">
        select
        <include refid="userField"/>
        from dy_user
        <where>
            <if test="password != null and password != ''">
                user_password = #{password}
            </if>
            <if test="realname != null and realname != ''">
                and user_realname = #{realname}
            </if>
        </where>
    </select>

    <!--bind元素,模糊查询-->
<!--    <select id="findByNameAndPassword" resultMap="userMap">-->
<!--        <bind name="realname_pattern" value="'%'+realname+'%'"/>-->
<!--        <bind name="password_pattern" value="'%'+password+'%'"/>-->
<!--        select *from dy_user -->
<!--        <where>-->
<!--            <if test="realname != null and realname != ''">-->
<!--                and user_realname like #{realname_pattern}-->
<!--            </if>-->
<!--            <if test="password != null and password != ''">-->
<!--                and user_password like #{password_pattern}-->
<!--            </if>-->
<!--        </where>-->
<!--    </select>-->

<!--    <update id="updateUserMessage">-->
<!--        update dy_user-->
<!--        <trim prefix="set" suffixOverrides=",">-->
<!--            <if test="phone != null and phone != ''">-->
<!--                user_phone = #{phone},-->
<!--            </if>-->
<!--            <if test="nickname != null and nickname != ''">-->
<!--                user_nickname = #{nickname}-->
<!--            </if>-->
<!--        </trim>-->
<!--        where user_id = #{id}-->
<!--    </update>-->
    <!--使用set语句实现更新,set同where一样当没有元素的时候自动忽略set语句,而且会自动忽略语句最后的逗号-->
    <update id="updateUserMessage">
        update dy_user
        <set>
            <if test="phone != null and phone != ''">
                user_phone = #{phone},
            </if>
            <if test="nickname != null and nickname != ''">
                user_nickname = #{nickname},
            </if>
        </set>
        where user_id = #{id}
    </update>

    <select id="findUserByIds" resultMap="userMap">
        select
        <include refid="userField"/>
        from dy_user
        where user_id in
        /*
        collection: 要做foreach的对象，作为入参时，List对象默认用"list"代替作为键，数组对象有"array"
        代替作为键，Map对象没有默认的键。当然在作为入参时可以使用@Param("keyName")来设置键，设置keyName后，
        list,array将会失效。 除了入参这种情况外，还有一种作为参数对象的某个字段的时候。
        举个例子：如果User有属性List ids。入参是User对象，那么这个collection = "ids".如果User有属性Ids
        ids;其中Ids是个对象，Ids有个属性List id;入参是User对象，那么collection = "ids.id"
        */
        <foreach collection="userIdList" index="index" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

</mapper>
