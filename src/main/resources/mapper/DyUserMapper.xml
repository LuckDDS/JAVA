<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.dy.dao.DyUserDao">
    <resultMap id="UserMessage" type="com.dy.model.DyUser">
        <!--column代表的是数据库中定义的字段的名称,property代表自己model定义的字段,让他们对应起来-->
        <id column="user_id" jdbcType="INTEGER" property="id"/>
        <result column="user_realname" jdbcType="VARCHAR" property="realname"/>
        <result column="user_password" jdbcType="VARCHAR" property="password"/>
    </resultMap>
    <sql id="userField">
        <!--因为user_address在resultMap UserMessage中未定义所以需要对其进行转换,user_address是在
        数据库中的名称,需要对应address这是model中的昵称-->
        user_id,user_realname,user_address as address
    </sql>
    <!--获取所有用户-->
    <!--resultType和resultMap写一个即可,下面使用resultMap的不需要使用as了,因为上面定义的resultMap已经
    处理了名称不一致的问题,如果使用resultType没有定义resultMap得用(as)处理名称不一致的问题-->
    <select id="findAll" resultMap="UserMessage">
        select
            <include refid="userField"></include>
        from dy_user
    </select>
    <!--id的值必须和dao中的方法名一致-->
    <select id="findUser" resultType="com.dy.model.DyUser" parameterType="integer">
    <!--如果model中的属性名称和表中的名称不一致时,需要使用as字段处理(as起别名)-->
        select user_id as id,user_realname as name,user_password as password from dy_user where user_id = #{id}
    </select>

    <delete id="deleteUser" parameterType="string">
        delete from dy_user where user_id = #{id};
    </delete>

    <update id="updateUser">
        <!--多个参数时如果在dao层不使用@param修饰,哪么这里就不能使用#{id}这种,只能使用#{arg0}或者#{param0}这种方式-->
        update dy_user set user_realname = #{name},user_password = #{password} where user_id = #{id}
    </update>
    <!--#{name}里面的name必须和@param(name)中的name保持一致-->
    <select id="countByName" parameterType="string" resultType="int">
        select  count(*) from dy_user where user_realname = #{name}
    </select>
</mapper>