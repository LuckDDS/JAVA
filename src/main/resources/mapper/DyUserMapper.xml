<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.dy.dao.DyUserDao">
    <resultMap id="UserMessage" type="com.dy.model.DyUser">
        <!--column代表的是数据库中定义的字段的名称,property代表自己model定义的字段,让他们对应起来-->
        <id column="m_id" jdbcType="INTEGER" property="id"/>
        <result column="m_name" jdbcType="VARCHAR" property="name"/>
        <result column="m_password" jdbcType="VARCHAR" property="password"/>
    </resultMap>
    <sql id="select">
        select *from dy_user
    </sql>
    <!--获取所有用户-->
    <!--resultType和resultMap写一个即可,下面使用resultMap的不需要使用as了,因为上面定义的resultMap已经
    处理了名称不一致的问题,如果使用resultType没有定义resultMap得用(as)处理名称不一致的问题-->
    <select id="findAll" resultMap="UserMessage">
        <include refid="select"></include>
    </select>

    <select id="findUser" resultType="com.dy.model.DyUser" parameterType="integer">
    <!--如果model中的属性名称和表中的名称不一致时,需要使用as字段处理(as起别名)-->
        select m_id as id,m_name as name,m_password as password from dy_user where m_id = #{id}
    </select>

    <insert id="addUser" parameterType="com.dy.model.DyUser">
        insert into dy_user (m_id,m_name,m_password) values (#{id},#{name},#{password})
    </insert>

    <delete id="deleteUser" parameterType="string">
        delete from dy_user where m_id = #{id};
    </delete>

    <update id="updateUser">
        <!--如果在dao层不使用@param修饰,哪么这里就不能使用#{id}这种,只能使用#{arg0}或者#{param0}这种方式-->
        update dy_user set m_name = #{name},m_password = #{password} where m_id = #{id}
    </update>
</mapper>